# -*- coding: utf-8 -*-
"""omer_week4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tyya3_gAJ6ZazrBcGYpYprHWRLYuTzAG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

country = pd.read_csv("/content/drive/MyDrive/World Bank/Metadata_Country.csv")
population = pd.read_csv("/content/drive/MyDrive/World Bank/country_population.csv")
fertility_rate = pd.read_csv("/content/drive/MyDrive/World Bank/fertility_rate.csv")
life_expectancy = pd.read_csv("/content/drive/MyDrive/World Bank/life_expectancy.csv")

country.head()

population.head()

fertility_rate.head()

life_expectancy.head()

country.isna().sum()

# population.drop(['Country Name',"Indicator Name","Indicator Code"],axis=1,inplace=True)

population.head()

year = [str(y) for y in range (1960,2017)]
year

population.dropna(axis=0,inplace=True)
population.shape

df = pd.melt(population,
              id_vars='Country Code',
              value_vars=year,
              var_name='Year',
              value_name='population')
df.head()

def preprocess_df(df, value_name):
    """ remove missing values and put years in one column

    Parameters
    ----------
    df: dataframe
        the data that needs to be preprocessed

    value_name: string
        the name of the column that will contain the year's data

    Return
    ------
    preprocessed dataframe
    """
    years = [str(y) for y in range(1960, 2017)]

    # remove useless columns

    # remove countries with missing value
    df.dropna(axis=0, inplace=True)

    # melt the dataframe to have years in one column
    df = pd.melt(df,
                 id_vars='Country Code',
                 value_vars=years,
                 var_name='Year',
                 value_name=value_name)

    return df


# Preprocess datasets
life_expectancy_processed = preprocess_df(life_expectancy, 'Life Expectancy')
fertility_rate_processed = preprocess_df(fertility_rate, 'Fertility Rate')
population_processed = preprocess_df(population, 'Population')

# Merge datasets
merged_df = life_expectancy_processed.merge(fertility_rate_processed, on=['Country Code', 'Year'])
merged_df = merged_df.merge(population_processed, on=['Country Code', 'Year'])
merged_df = merged_df.merge(country[['Country Code', 'Region']], on='Country Code')

# Convert year to integer
merged_df['Year'] = merged_df['Year'].astype(int)

# Create the scatter chart using Plotly Express
fig_fertility_expectation_region = px.scatter(
    data_frame=merged_df,
    x='Fertility Rate',               # x-axis consists of fertility rate
    y='Life Expectancy',              # y-axis consists of life expectancy
    size='Population',                # bubble size based on population
    size_max=70,                      # set the maximum size for bubbles
    hover_name='Country Code',        # will view country names on hovering
    color='Region',                   # will color accordingly to region
    animation_frame='Year',           # will animate in time frame
    animation_group='Country Code',   # animation format
    template='plotly_dark',           # black as template
    labels={'Region': 'Region'},      # standardize the label
    range_x=[0, 10],                  # range of x axis
    range_y=[10, 90]                  # range of y axis
)

fig_fertility_expectation_region.update_layout(
    title='Fertility Rate vs. Life Expectancy',   # title of graph
    xaxis_title='Fertility Rate',                 # x label
    yaxis_title='Life Expectancy'                 # y label
)

fig_fertility_expectation_region.show()

def preprocess_df(df,value_name):
  years = [str(y) for y in range(1960,2017)]

  df = pd.melt(df,
               id_vars = "Country Code",
               value_vars = years,
               var_name = "Year",
               value_name = value_name)
  return df


life_expectancy_processed = preprocess_df(life_expectancy,"Life Expectancy")
fertility_rate_processed = preprocess_df(fertility_rate, 'Fertility Rate')
population_processed = preprocess_df(population, 'Population')

#merging the datasets
merged_df = life_expectancy_processed.merge(fertility_rate_processed, on=["Country Code","Year"])
merged_df = merged_df.merge(population_processed, on=["Country Code","Year"])
merged_df = merged_df.merge(country[['Country Code',"Region"]],on= "Country Code")

mergef_df = merged_df["Year"].astype(int)

merged_df = life_expectancy_processed.merge(fertility_rate_processed, on=["Country Code","Year"])
merged_df

merged_df = merged_df.merge(population_processed, on=["Country Code","Year"])
merged_df

merged_df = merged_df.merge(country[['Country Code',"Region"]],on= "Country Code")
merged_df

import matplotlib.pyplot as plt
import plotly.express as px

fig_fertility_expectation_region = px.scatter(
    data_frame = merged_df,
    x = "Fertility Rate",
    y = "Life Expectancy",
    size = "Population",
    size_max= 70,
    hover_name = "Country Code",
    color = "Region",
    animation_frame = "Year",
    animation_group="Country Code",
    template = "plotly_white",
    range_x = [0,10],
    range_y = [10,90]
)

fig_fertility_expectation_region.update_layout(
    title='Fertility Rate vs. Life Expectancy',   # title of graph
    xaxis_title='Fertility Rate',                 # x label
    yaxis_title='Life Expectancy'                 # y label
)
fig_fertility_expectation_region.show()

